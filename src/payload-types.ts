/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    workflows: Workflow;
    workflowLogs: WorkflowLog;
    post: Post;
    contracts: Contract;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    workflows: WorkflowsSelect<false> | WorkflowsSelect<true>;
    workflowLogs: WorkflowLogsSelect<false> | WorkflowLogsSelect<true>;
    post: PostSelect<false> | PostSelect<true>;
    contracts: ContractsSelect<false> | ContractsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name: string;
  role: 'admin' | 'manager' | 'reviewer' | 'user';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workflows".
 */
export interface Workflow {
  id: number;
  /**
   * Name of the workflow (e.g., "Post Approval Process")
   */
  name: string;
  /**
   * Detailed description of this workflow
   */
  description?: string | null;
  /**
   * Collection slug this workflow applies to (e.g., "post", "contracts")
   */
  targetCollection: string;
  /**
   * Whether this workflow is currently active
   */
  isActive?: boolean | null;
  steps: {
    /**
     * Name of this step (e.g., "Legal Review")
     */
    stepName: string;
    stepType: 'approval' | 'review' | 'sign-off' | 'comment-only';
    assignedTo: {
      type: 'user' | 'role';
      user?: (number | null) | User;
      role?: ('admin' | 'manager' | 'reviewer') | null;
    };
    /**
     * Conditions that must be met for this step to be triggered
     */
    conditions?:
      | {
          /**
           * Field name to check (e.g., "amount", "priority")
           */
          field: string;
          operator: 'equals' | 'not_equals' | 'greater_than' | 'less_than' | 'contains';
          /**
           * Value to compare against
           */
          value: string;
          id?: string | null;
        }[]
      | null;
    /**
     * SLA in hours for this step (bonus feature)
     */
    slaHours?: number | null;
    /**
     * Order of execution (1, 2, 3, etc.)
     */
    order: number;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workflowLogs".
 */
export interface WorkflowLog {
  id: number;
  workflowId: number | Workflow;
  /**
   * ID of the document this workflow action affected
   */
  documentId: string;
  /**
   * Collection name of the affected document
   */
  collection: string;
  /**
   * ID of the workflow step
   */
  stepId: string;
  stepName: string;
  action: 'approved' | 'rejected' | 'commented' | 'started' | 'completed' | 'escalated';
  user: number | User;
  /**
   * Optional comment from the user
   */
  comment?: string | null;
  /**
   * ID of the previous step (for tracking flow)
   */
  previousStepId?: string | null;
  /**
   * ID of the next step (for tracking flow)
   */
  nextStepId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "post".
 */
export interface Post {
  id: number;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  priority: 'low' | 'normal' | 'high' | 'critical';
  status?: ('draft' | 'in-review' | 'published' | 'rejected') | null;
  author: number | User;
  /**
   * Current workflow step ID
   */
  currentWorkflowStep?: string | null;
  workflowStatus?: ('not-started' | 'in-progress' | 'completed' | 'rejected') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contracts".
 */
export interface Contract {
  id: number;
  title: string;
  description: string;
  amount: number;
  contractType: 'service' | 'purchase' | 'nda' | 'employment';
  status?: ('draft' | 'under-review' | 'legal-review' | 'approved' | 'rejected') | null;
  assignedTo: number | User;
  /**
   * Current workflow step ID
   */
  currentWorkflowStep?: string | null;
  workflowStatus?: ('not-started' | 'in-progress' | 'completed' | 'rejected') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'workflows';
        value: number | Workflow;
      } | null)
    | ({
        relationTo: 'workflowLogs';
        value: number | WorkflowLog;
      } | null)
    | ({
        relationTo: 'post';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'contracts';
        value: number | Contract;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workflows_select".
 */
export interface WorkflowsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  targetCollection?: T;
  isActive?: T;
  steps?:
    | T
    | {
        stepName?: T;
        stepType?: T;
        assignedTo?:
          | T
          | {
              type?: T;
              user?: T;
              role?: T;
            };
        conditions?:
          | T
          | {
              field?: T;
              operator?: T;
              value?: T;
              id?: T;
            };
        slaHours?: T;
        order?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workflowLogs_select".
 */
export interface WorkflowLogsSelect<T extends boolean = true> {
  workflowId?: T;
  documentId?: T;
  collection?: T;
  stepId?: T;
  stepName?: T;
  action?: T;
  user?: T;
  comment?: T;
  previousStepId?: T;
  nextStepId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "post_select".
 */
export interface PostSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  priority?: T;
  status?: T;
  author?: T;
  currentWorkflowStep?: T;
  workflowStatus?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contracts_select".
 */
export interface ContractsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  amount?: T;
  contractType?: T;
  status?: T;
  assignedTo?: T;
  currentWorkflowStep?: T;
  workflowStatus?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}